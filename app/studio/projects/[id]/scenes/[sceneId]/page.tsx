'use client'

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import SceneNavigation from '@/components/scenes/SceneNavigation'
import ImageViewer from '@/components/scenes/ImageViewer'
import SceneSidebar from '@/components/scenes/SceneSidebar'
import SceneToolbar from '@/components/scenes/SceneToolbar'
import SceneDescription from '@/components/scenes/SceneDescription'
import { AnnotationTools } from '@/components/editor/AnnotationTools'
import { Loader2 } from 'lucide-react'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { socketClient } from '@/lib/socket/client'
import { useToast } from '@/hooks/use-toast'
import { scenesAPI } from '@/lib/api/scenes'

interface Scene {
  id: string
  name: string
  description: string
  images: {
    lineart: string | null
    art: string | null
  }
}

export default function SceneEditorPage() {
  const params = useParams()
  const projectId = params.id as string
  const sceneId = params.sceneId as string
  const { toast } = useToast()

  const [isLeftSidebarOpen, setIsLeftSidebarOpen] = useState(false)
  const [isRightSidebarOpen, setIsRightSidebarOpen] = useState(true)
  const [isLoading, setIsLoading] = useState(true)
  const [currentScene, setCurrentScene] = useState<Scene | null>(null)
  const [activeTab, setActiveTab] = useState('view')
  const [isSocketConnected, setIsSocketConnected] = useState(false)
  

  useEffect(() => {
    // Ïî¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    const loadSceneData = async () => {
      setIsLoading(true)
      try {
        // API Ìò∏Ï∂úÎ°ú Ïã§Ï†ú Ïî¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        const sceneData = await scenesAPI.getScene(projectId, sceneId)

        // ÌòÑÏû¨ ÌôúÏÑ±ÌôîÎêú Ïù¥ÎØ∏ÏßÄ Ï∞æÍ∏∞
        const lineartImage = sceneData.images?.find(
          (img: any) => img.type === 'lineart' && (img.isCurrent || img.is_current)
        )
        const artImage = sceneData.images?.find(
          (img: any) => img.type === 'art' && (img.isCurrent || img.is_current)
        )

        setCurrentScene({
          id: sceneData.id,
          name: sceneData.title || `Scene ${sceneData.scene_number || sceneId}`,
          description: sceneData.description || '',
          images: {
            lineart: lineartImage?.fileUrl || lineartImage?.file_url || null,
            art: artImage?.fileUrl || artImage?.file_url || null
          }
        })

        console.log('[SceneEditor] Scene data loaded:', {
          sceneId,
          title: sceneData.title,
          sceneNumber: sceneData.scene_number,
          imagesCount: sceneData.images?.length || 0,
          lineartUrl: lineartImage?.file_url,
          artUrl: artImage?.file_url,
        })
        // Railway ÎπåÎìú Ï∫êÏãú Í∞±Ïã†Ïö© Ï£ºÏÑù
      } catch (error) {
        console.error('[SceneEditor] Error loading scene data:', error)
        toast({
          title: 'Ïî¨ Î°úÎìú Ïã§Ìå®',
          description: 'Ïî¨ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.',
          variant: 'destructive'
        })
      } finally {
        setIsLoading(false)
      }
    }

    void loadSceneData()
  }, [sceneId, projectId, toast])

  // Socket.io Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞ Î∞è Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
  useEffect(() => {
    if (!sceneId || !projectId) return

    const socket = socketClient.connect()

    // Socket Ïó∞Í≤∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨
    console.log(`[SceneEditor] Socket connection state:`, socket.connected)
    console.log(`[SceneEditor] Socket ID:`, socket.id)

    // Ïó∞Í≤∞ Ìï∏Îì§Îü¨
    const handleConnect = () => {
      console.log(`[SceneEditor] ‚úÖ Socket connected! ID:`, socket.id)
      setIsSocketConnected(true)

      // Ïî¨Í≥º ÌîÑÎ°úÏ†ùÌä∏ Î£∏Ïóê Ï∞∏Í∞Ä
      console.log(`[SceneEditor] Joining scene room: ${sceneId}`)
      console.log(`[SceneEditor] Joining project room: ${projectId}`)
      socket.emit('join_scene', { projectId, sceneId })
      socket.emit('join_project', { projectId })
    }

    // Ïó∞Í≤∞ ÏóêÎü¨ Ìï∏Îì§Îü¨
    const handleConnectError = (error: any) => {
      console.error(`[SceneEditor] ‚ùå Socket connection error:`, error)
      setIsSocketConnected(false)
    }

    // Ïó∞Í≤∞ Ìï¥Ï†ú Ìï∏Îì§Îü¨
    const handleDisconnect = (reason: string) => {
      console.log(`[SceneEditor] ‚ùå Socket disconnected, reason:`, reason)
      setIsSocketConnected(false)
    }

    // Ïî¨ Î£∏ Ï∞∏Í∞Ä ÏÑ±Í≥µ Ìï∏Îì§Îü¨
    const handleJoinedScene = (data: any) => {
      console.log(`[SceneEditor] ‚úÖ Successfully joined scene room:`, data)
    }

    // ÌîÑÎ°úÏ†ùÌä∏ Î£∏ Ï∞∏Í∞Ä ÏÑ±Í≥µ Ìï∏Îì§Îü¨
    const handleJoinedProject = (data: any) => {
      console.log(`[SceneEditor] ‚úÖ Successfully joined project room:`, data)
    }

    // ÎåìÍ∏Ä ÏÉùÏÑ± Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ (ÏÉàÎ°úÏö¥ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä)
    const handleCommentNew = (data: { comment: any, targetType: string, targetId: string, timestamp: Date }) => {
      console.log(`[SceneEditor] ‚úÖ New comment event received:`, data)

      if (data.targetType === 'scene' && data.targetId === sceneId) {
        toast({
          title: 'ÏÉà ÎåìÍ∏Ä',
          description: `${data.comment.user?.nickname || 'ÏÇ¨Ïö©Ïûê'}ÎãòÏù¥ ÎåìÍ∏ÄÏùÑ ÏûëÏÑ±ÌñàÏäµÎãàÎã§.`,
        })
        // SceneComments Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÏûêÎèôÏúºÎ°ú ÏÉàÎ°úÍ≥†Ïπ®ÌïòÎèÑÎ°ù Ïª§Ïä§ÌÖÄ Ïù¥Î≤§Ìä∏ Î∞úÏÜ°
        window.dispatchEvent(new CustomEvent('comment:refresh'))
      }
    }

    // Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleImageUploaded = (data: { image: any, sceneId: string }) => {
      console.log(`[SceneEditor] ‚úÖ Image uploaded event received:`, data)

      if (data.sceneId === sceneId) {
        // ÌòÑÏû¨ Ïî¨ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
        setCurrentScene(prev => {
          if (!prev) return prev
          return {
            ...prev,
            images: {
              ...prev.images,
              [data.image.type]: data.image.fileUrl
            }
          }
        })

        toast({
          title: 'Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏôÑÎ£å',
          description: `ÏÉàÎ°úÏö¥ ${data.image.type === 'lineart' ? 'ÏÑ†Ìôî' : 'ÏïÑÌä∏'} Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.`,
        })
      }
    }

    // Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleImageUpdated = (data: { image: any, sceneId: string }) => {
      console.log(`[SceneEditor] ‚úÖ Image updated event received:`, data)

      if (data.sceneId === sceneId) {
        setCurrentScene(prev => {
          if (!prev) return prev
          return {
            ...prev,
            images: {
              ...prev.images,
              [data.image.type]: data.image.fileUrl
            }
          }
        })

        toast({
          title: 'Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å',
          description: `${data.image.type === 'lineart' ? 'ÏÑ†Ìôî' : 'ÏïÑÌä∏'} Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.`,
        })
      }
    }

    // ÎåìÍ∏Ä ÏÉùÏÑ± Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleCommentCreated = (data: { comment: any, targetType: string, targetId: string }) => {
      console.log(`[SceneEditor] ‚úÖ Comment created event received:`, data)

      if (data.targetType === 'scene' && data.targetId === sceneId) {
        toast({
          title: 'ÏÉà ÎåìÍ∏Ä',
          description: `${data.comment.user?.nickname || 'ÏÇ¨Ïö©Ïûê'}ÎãòÏù¥ ÎåìÍ∏ÄÏùÑ ÏûëÏÑ±ÌñàÏäµÎãàÎã§.`,
        })
      }
    }

    // ÎåìÍ∏Ä ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleCommentUpdated = (data: { comment: any, targetType: string, targetId: string }) => {
      console.log(`[SceneEditor] ‚úÖ Comment updated event received:`, data)

      if (data.targetType === 'scene' && data.targetId === sceneId) {
        toast({
          title: 'ÎåìÍ∏Ä ÏàòÏ†ï',
          description: 'ÎåìÍ∏ÄÏù¥ ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.',
        })
      }
    }

    // ÎåìÍ∏Ä ÏÇ≠Ï†ú Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleCommentDeleted = (data: { commentId: string, targetType: string, targetId: string }) => {
      console.log(`[SceneEditor] ‚úÖ Comment deleted event received:`, data)

      if (data.targetType === 'scene' && data.targetId === sceneId) {
        toast({
          title: 'ÎåìÍ∏Ä ÏÇ≠Ï†ú',
          description: 'ÎåìÍ∏ÄÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.',
        })
      }
    }

    // Ïî¨ ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleSceneUpdated = (data: { scene: any, sceneId: string }) => {
      console.log(`[SceneEditor] ‚úÖ Scene updated event received:`, data)

      if (data.sceneId === sceneId) {
        setCurrentScene(prev => {
          if (!prev) return prev
          return {
            ...prev,
            name: data.scene.name || prev.name,
            description: data.scene.description || prev.description
          }
        })

        toast({
          title: 'Ïî¨ ÏóÖÎç∞Ïù¥Ìä∏',
          description: 'Ïî¨ Ï†ïÎ≥¥Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.',
        })
      }
    }

    // Ïó∞Í≤∞ ÏÉÅÌÉúÏóê Îî∞Îùº Ï≤òÎ¶¨
    if (socket.connected) {
      handleConnect()
    } else {
      socket.on('connect', handleConnect)
    }

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
    socket.on('connect_error', handleConnectError)
    socket.on('disconnect', handleDisconnect)
    socket.on('scene_joined', handleJoinedScene)
    socket.on('project_joined', handleJoinedProject)
    socket.on('scene:image-uploaded', handleImageUploaded)
    socket.on('image:upload', handleImageUploaded)
    socket.on('scene:image-updated', handleImageUpdated)
    socket.on('comment:created', handleCommentCreated)
    socket.on('comment:new', handleCommentNew)
    socket.on('comment:updated', handleCommentUpdated)
    socket.on('comment:deleted', handleCommentDeleted)
    socket.on('scene:updated', handleSceneUpdated)

    console.log(`[SceneEditor] üì° All event listeners registered for scene: ${sceneId}`)

    return () => {
      console.log(`[SceneEditor] üö™ Cleaning up and leaving rooms`)

      // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
      socket.off('connect', handleConnect)
      socket.off('connect_error', handleConnectError)
      socket.off('disconnect', handleDisconnect)
      socket.off('scene_joined', handleJoinedScene)
      socket.off('project_joined', handleJoinedProject)
      socket.off('scene:image-uploaded', handleImageUploaded)
      socket.off('image:upload', handleImageUploaded)
      socket.off('scene:image-updated', handleImageUpdated)
      socket.off('comment:created', handleCommentCreated)
      socket.off('comment:new', handleCommentNew)
      socket.off('comment:updated', handleCommentUpdated)
      socket.off('comment:deleted', handleCommentDeleted)
      socket.off('scene:updated', handleSceneUpdated)

      // Î£∏ Îñ†ÎÇòÍ∏∞
      socket.emit('leave_room', { roomId: `scene:${sceneId}` })
      socket.emit('leave_room', { roomId: `project:${projectId}` })

      console.log(`[SceneEditor] üì° Event listeners removed and rooms left`)
    }
  }, [sceneId, projectId, toast])

  // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ Ìï∏Îì§Îü¨
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      // Ctrl/Cmd + 1: ÏôºÏ™Ω ÏÇ¨Ïù¥ÎìúÎ∞î ÌÜ†Í∏Ä
      if ((e.ctrlKey || e.metaKey) && e.key === '1') {
        e.preventDefault()
        setIsLeftSidebarOpen(prev => !prev)
      }
      // Ctrl/Cmd + 2: Ïò§Î•∏Ï™Ω ÏÇ¨Ïù¥ÎìúÎ∞î ÌÜ†Í∏Ä
      if ((e.ctrlKey || e.metaKey) && e.key === '2') {
        e.preventDefault()
        setIsRightSidebarOpen(prev => !prev)
      }
    }

    window.addEventListener('keydown', handleKeyPress)
    return () => window.removeEventListener('keydown', handleKeyPress)
  }, [])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    )
  }

  return (
    <div className="flex flex-col h-screen bg-background">
      {/* Scene Navigation Tabs */}
      <SceneNavigation 
        projectId={projectId} 
        currentSceneId={sceneId}
      />
      
      {/* Main Editor Layout */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Sidebar - Tools (Collapsible) */}
        <SceneToolbar 
          isOpen={isLeftSidebarOpen}
          onToggle={() => setIsLeftSidebarOpen(!isLeftSidebarOpen)}
        />
        
        {/* Central Content Area */}
        <div className="flex-1 flex flex-col">
          {/* Tab Navigation */}
          <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
            <div className="flex items-center justify-between border-b">
              <TabsList className="justify-start rounded-none border-none">
                <TabsTrigger value="view">Î∑∞Ïñ¥</TabsTrigger>
                <TabsTrigger value="annotate">Ï£ºÏÑù</TabsTrigger>
              </TabsList>
              <div className="px-4">
                <Badge variant={isSocketConnected ? "default" : "destructive"} className="flex items-center gap-1">
                  <span className={`h-2 w-2 rounded-full ${isSocketConnected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`} />
                  {isSocketConnected ? 'Ïã§ÏãúÍ∞Ñ Ïó∞Í≤∞Îê®' : 'Ïó∞Í≤∞ ÎÅäÍπÄ'}
                </Badge>
              </div>
            </div>
            
            {/* View Tab */}
            <TabsContent value="view" className="flex-1 flex flex-col mt-0">
              <div className="flex-1 relative bg-muted/30">
                <ImageViewer 
                  sceneId={sceneId}
                  lineartImage={currentScene?.images?.lineart}
                  artImage={currentScene?.images?.art}
                />
              </div>
            </TabsContent>
            
            {/* Annotation Tab */}
            <TabsContent value="annotate" className="flex-1 flex flex-col mt-0 p-4">
              <AnnotationTools
                imageUrl={currentScene?.images?.art || currentScene?.images?.lineart}
                width={800}
                height={600}
                onSave={(_shapes) => {
                  // TODO: Save annotations to backend
                }}
              />
            </TabsContent>
          </Tabs>
          
          {/* Bottom Panel - Scene Description */}
          <SceneDescription 
            sceneId={sceneId}
            initialDescription={currentScene?.description}
          />
        </div>
        
        {/* Right Sidebar - Comments/History */}
        <SceneSidebar 
          isOpen={isRightSidebarOpen}
          onToggle={() => setIsRightSidebarOpen(!isRightSidebarOpen)}
          sceneId={sceneId}
        />
      </div>
    </div>
  )
}
